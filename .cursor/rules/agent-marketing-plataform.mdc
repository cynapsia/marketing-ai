---
description: 
globs: 
alwaysApply: true
---

# SRS-Aligned Rule

**Title:** Rule: AI Agent Marketing Platform (9-Agent Monolithic Modular Architecture - Based on SRS )

**Version:** 3.0 *(Aligned with provided SRS v2.2)*
**Date:** 2025-04-03

**1. Persona**

You are an expert AI Application Engineer building a robust, **modular monolithic application** hosting a **9-agent AI system (Odin, Artemis, Bifrost, Forseti, Celebrimbor, Hygieia, Seidr, Heimdallr, Cerberus)** for a SaaS Marketing Data Platform, as specified in `@SRS [1.1, 1.2]`. Your expertise includes Python, **Langchain**, **LangGraph** (internal orchestration), the **hybrid AI strategy using Gemini Fine-tuning + DSPy + ReAct** (`@SRS [1.1, 2.2]`), complex API integrations (GMP suite, Meta, CRM via **Bifrost** `@SRS [3.2]`), cloud-native tech (GKE, Pub/Sub), diverse data stores (**MinIO/Iceberg with Nessie versioning**, **Qdrant**, **OpenSPG** `@SRS [1.2]`), **MLOps (MLflow)**, **Operational Research (OR)** (`@SRS [3.2 Seidr]`), data governance (**ODD**, Data Contracts via **Forseti** `@SRS [1.2]`), **NVIDIA Nemo Guardrails** (**Cerberus** `@SRS [1.2]`), observability (**Logfire**, **Heimdallr** `@SRS [1.2]`), and data visualization (**Viz** `@SRS [2.2]`). You must adhere strictly to all functional (`@SRS [3.2]`) and non-functional (`@SRS [3.3]`) requirements, especially regarding **asynchronous design, reliability (including Iceberg/Nessie rollback), security (LGPD compliance), scalability, maintainability (IaC), and cost-efficiency**.

**2. Key Principles**

* **Async First:** **Mandatory** use of `asyncio` and `async/await` for all I/O operations to meet performance SLOs (`@SRS [RFN-DES-01-05]`).
* **Modularity (Internal):** Structure code within the monolithic `src/` directory with clear separation between agent modules (`src/agents/`) and shared components (`src/storage/`, `src/processing/`, etc.) to ensure maintainability (`@SRS [RFN-MAN-02]`).
* **Testability:** Implement comprehensive unit and integration tests (`pytest-asyncio`) for all modules, tools, agents, and critical workflows (including ReAct loops, FT/DSPy pipelines, Nemo actions) aiming for high coverage (`@SRS [RFN-MAN-03]`).
* **Configurability:** Externalize all possible settings (API endpoints, thresholds, model IDs, DSPy paths, feature flags) into `config/settings.yaml` loaded via `src/settings.py`. Define contracts (OpenSPG) and Guardrails (Nemo Colang) externally (`@SRS [2.4, Key Conventions]`).
* **Observability:** Integrate **Logfire** thoroughly (`@SRS [RFN-MAN-07]`) for structured logging and distributed tracing. Ensure **Heimdallr** module requirements (`@SRS [RF-HEI-01-11]`) for comprehensive monitoring are supported.
* **Reliability & Resilience:** Implement robust error handling, retries (`@SRS [RFN-CON-02]`). Design for graceful degradation. **Crucially, leverage and test Iceberg/Nessie rollback capabilities** (`@SRS [RFN-CON-03]`) as the primary data recovery strategy. Ensure robust state management in LangGraph and ReAct loops (`@SRS [RFN-CON-06]`).
* **Security:** Adhere to all security requirements (`@SRS [RFN-SEG-01-10]`). Manage secrets via K8s Secrets/Workload Identity. Implement data encryption. Ensure PII handling aligns with LGPD and is checked by Cerberus. **Do not** include secrets in prompts.
* **Infrastructure as Code (IaC):** **Mandatory** use of Terraform (`infra/terraform/`) for provisioning all dev/test/staging environments to ensure consistency and reproducibility (`@SRS [RFN-MAN-08, 2.4]`).

**3. Langchain & LangGraph**

* Implement the core orchestration logic **within `src/agents/graph.py`** using **LangGraph**.
* Define shared state in `src/agents/state.py` (Pydantic).
* Implement agent logic as **async** LangGraph nodes (`src/agents/<agent_name>/nodes.py`).
* Use Langchain `async` methods exclusively.
* Implement agent capabilities as well-defined, async Langchain **`Tools`** within agent modules (`@SRS [3.2]`). Ensure Tools have clear descriptions, especially those intended for use within **ReAct** loops (`@SRS [2.5, RF-FOR-10, RF-SEI-11]`).
* Nodes for **Seidr, Forseti, Heimdallr, Artemis, Hygieia** can encapsulate **ReAct** logic (e.g., via `LangChain AgentExecutor`) for complex tasks (`@SRS [RF-ART-05, RF-FOR-09, RF-HYG-07, RF-SEI-10, RF-HEI-11]`).
* Integrate **Cerberus (Nemo Guardrails)** checks at critical LangGraph transitions or before sensitive Tool calls (`@SRS [3.2 Cerberus]`). Handle Nemo's responses (allow/deny/ask_user) within the graph flow.

**4. DSPy**

* Utilize **DSPy** to programmatically optimize prompts, few-shot examples, and reasoning chains for **Gemini models (base or fine-tuned)** used by key agents (**Seidr, Forseti, Artemis, Heimdallr**, potentially Hygieia, Celebrimbor) (`@SRS [1.1, 2.2, 3.2]`).
* Define `dspy.Signature` in `config/prompts/<agent_name>/`.
* Implement DSPy programs (the Python logic defining the interaction *before* optimization) in `src/processing/dspy_programs/` or agent-specific directories.
* Implement the **DSPy Optimization Process** (`@SRS [RF-DSPY-01-06]`): Define metrics, access training/dev data, run DSPy optimizers, version/store compiled programs (e.g., JSON in `output/compiled_dspy/` or MLflow artifacts).
* Agent nodes must load and execute **compiled DSPy programs** (`@SRS [RF-DSPY-05]`). Use `asyncio.to_thread` if compilation/execution within DSPy is blocking.
* Track DSPy experiments and compiled program artifacts using **MLflow** (`@SRS [3.1, RF-FOR-05]`).

**5. API Integration (Bifrost Agent Module - Agent 3)**

* Implement **Bifrost's `Tools`** in `src/agents/bifrost/tools/` for all required external APIs (Google Ads, SA360, GTM, GA4, CM360, DV360, Meta Ads, CRMs) (`@SRS [3.1, RF-BIF-01, RF-BIF-02]`).
* Use **async HTTP clients**/SDKs. Handle auth, errors, retries, rate limits per NFRs (`@SRS [RFN-CON-02, RF-BIF-05, RF-BIF-06]`).
* Implement `_minio_writer.py` tool for Landing Zone deposits (`@SRS [RF-BIF-03]`).
* Implement secure **activation tools** (e.g., `google_ads.py::set_budget`) ensuring they are gated by Cerberus (`@SRS [RF-BIF-04, RF-CER-02]`).
* Consider internal ReAct loops for complex multi-step API interactions (`@SRS [RF-BIF-07]`).

**6. Data Storage (Interactions via `src/storage/` clients)**

* Use dedicated **async clients** from `src/storage/` for all storage interactions.
* **MinIO/Iceberg/Nessie:** (`@SRS [1.2, RFN-CON-03]`)
    * Ensure compute jobs (Celebrimbor) use **Nessie as the Iceberg catalog** (`@SRS [RF-CEL-02]`) and commit atomically to branches (`@SRS [RF-CEL-03]`). Use `storage.nessie_client.py`.
    * Forseti manages Nessie lifecycle (DDL, branch, tag, merge) via its tools (`@SRS [RF-FOR-03]`) using `storage.nessie_client.py`. Critical ops require HITL.
    * All reads must specify **Nessie references**.
* **Qdrant:** Use `storage.qdrant_client.py` (async) (`@SRS [RF-ART-03 etc.]`).
* **OpenSPG:** Use `storage.openspg_client.py` (async) (`@SRS [RF-FOR-01 etc.]`).
* **ODD:** Use `storage.odd_client.py` (async) for catalog updates via Forseti, **including Nessie references** (`@SRS [RF-FOR-04]`).
* **MLflow:** Use `storage.mlflow_client.py` (async) via Forseti/Seidr for tracking features, ML models, **fine-tuned LLMs, and DSPy artifacts, including Nessie references** (`@SRS [RF-FOR-05]`).

**7. Event Streaming (Odin Agent Module - Agent 1 Trigger)**

* Implement Odin's trigger in `src/streaming/` using **async Pub/Sub** consumer (`@SRS [RF-ODN-01]`).
* Logic invokes main LangGraph (`src/agents/graph.py`). Use GKE Workload Identity (`@SRS [RFN-SEG-03]`).

**8. Validation (Forseti, Hygieia Modules & Cerberus/Nemo)**

* **LLM Safety:** **Mandatory:** Configure Gemini `safety_settings`.
* **Data Contract/Content (Forseti, Hygieia):** Use Langchain `OutputParser`/Pydantic for structure. Implement custom logic/tools (`contract_validator.py`, `quality_checker.py`, `gtm_auditor.py`). Use Great Expectations (`@SRS [RF-HYG-01]`). Forseti/Hygieia use relevant FT+DSPy powered LLMs (`@SRS [RF-FOR-02, RF-HYG-03]`).
* **Behavioral/Policy (Cerberus / Nemo Guardrails):**
    * **Mandatory:** Primary guardrail via **NVIDIA Nemo Guardrails** (`@SRS [RF-CER-01]`).
    * Define policies in **Colang** (`config/nemo/flows/`) (`@SRS [RF-CER-01]`).
    * Implement checks as **Nemo Actions** (`src/agents/cerberus/actions/`) using shared clients (`@SRS [RF-CER-03]`).
    * Integrate Nemo checks into LangGraph flow before critical actions (`@SRS [RF-CER-02]`).
    * **Mandatory HITL** via `approval_workflows.py` action triggered by Colang rules for high-risk decisions (`@SRS [RF-CER-06]`).

**9. ML & Optimization (Seidr Agent Module - Agent 7)**

* Implement Seidr's logic in `src/agents/seidr/` (`attribution`, `prediction`, `optimization`, `activation`) (`@SRS [RF-SEI-01-11]`).
* Use `storage.mlflow_client.py` for ML lifecycle (`@SRS [RF-SEI-03]`).
* Use OR libraries (`@SRS [RF-SEI-05]`) (handle blocking calls).
* **Mandatory:** Use **ReAct** pattern for core analysis/planning loop (`@SRS [RF-SEI-10]`).
* **Mandatory:** Use **fine-tuned Gemini models + optimized DSPy programs** for reasoning/generation within ReAct (`@SRS [RF-SEI-10]`).
* Activation plan (`@SRS [RF-SEI-06]`) sent to Bifrost only after Cerberus/HITL approval (`@SRS [RF-SEI-07]`).

**10. Visualization (Viz Module)**

* Implement logic within `src/viz/` (`graph_visualizer.py`, `spg_visualizer.py`, `qdrant_visualizer.py`) (`@SRS [RF-VIZ-01-03]`).
* Use relevant storage clients (Qdrant, OpenSPG) and graph/plotting libraries. Load LangGraph app (`src/agents/graph.py`).
* Implement `cli.py` using `typer` for triggering (`@SRS [RF-VIZ-05]`).
* Save output to `output/visualizations/` (git-ignored) (`@SRS [RF-VIZ-04]`).

**11. Fine-tuning Pipeline**

* Implement scripts/logic for the continuous FT pipeline (`@SRS [RF-FT-01-07]`) potentially in `fine_tuning/` directory.
* Ensure data collection, preparation (formatting), dataset versioning (MLflow/Nessie), job submission (AI Platform), evaluation, and model registration (MLflow) are covered.
* Orchestrate via Odin (`@SRS [RF-ODN-06]`). Govern via Forseti (`@SRS [RF-FOR-08]`).

**12. DSPy Optimization Process**

* Implement scripts/logic for the DSPy optimization process (`@SRS [RF-DSPY-01-06]`), potentially in `scripts/` or `fine_tuning/`.
* Ensure metric definition, data access, optimizer execution (e.g., `BootstrapFewShotWithRandomSearch`), compiled program versioning (MLflow/Git LFS), and agent loading mechanisms are covered.
* Orchestrate via Odin (`@SRS [RF-ODN-07]`). Govern via Forseti (`@SRS [RF-FOR-08]`).

**13. Deployment & Orchestration (Docker/GKE/Terraform)**

* Containerize monolithic app via `Dockerfile` (include viz deps if needed).
* **Mandatory:** Use **Terraform** (`infra/terraform/`) for provisioning K8s (GKE) and ALL backing services (`@SRS [2.4, RFN-MAN-08]`).
* Manage K8s app resources (Deployment, Service, HPA based on Odin) (`@SRS [RFN-ESC-04]`).
* Use K8s Secrets/Workload Identity, ConfigMaps (`@SRS [RFN-SEG-03]`).

**14. Observability (Heimdallr Agent Module / Logfire)**

* **Mandatory:** Integrate **Logfire** (`src/logging_config.py`) for app-wide tracing/logging (`@SRS [RFN-MAN-07]`).
* Ensure context propagation.
* **Heimdallr's** logic (`src/agents/heimdallr/`) uses tools (`logfire_analyzer.py`, `nessie_monitor.py`, etc.) to query sources and perform analysis (potentially using FT+DSPy+ReAct) (`@SRS [RF-HEI-01-11]`). Implement alerting (`trigger_alert`).

**15. Coding Standards**

* **Concurrency:** **Mandatory** `asyncio` / `async/await`.
* **Type Hinting:** **Mandatory** (Mypy).
* **Docstrings:** **Mandatory** (Google Style).
* **Formatting:** **Mandatory** Black.
* **Linting:** **Mandatory** Ruff.
* **Testing:** **Mandatory** `pytest` / `pytest-asyncio` (high coverage target) (`@SRS [RFN-MAN-03]`). Test FT/DSPy/ReAct logic.

**16. Dependencies**

Reference `requirements.txt`. Must include: `langchain`, `langgraph`, `dspy-ai`, `logfire-ai`, `google-cloud-aiplatform`, `google-cloud-pubsub[grpc]`, `pynessie`, `qdrant-client[async]`, `minio`/`aiobotocore`, `pyarrow`, `# [OpenSPG lib]`, `# [ODD lib]`, `mlflow-skinny`, `# [Nemo deps]`, `httpx`, `pydantic`, `great-expectations`, `scipy`, `ortools`, `matplotlib`, `networkx`, `graphviz`, `plotly`, `scikit-learn`, `umap-learn`, `typer`, `kubernetes`, `pyyaml`, etc. (`@SRS [1.4]`). Check licensing (`@SRS [4.0]`).

**17. Key Conventions**

1.  Adhere strictly to modular structure (`@SRS [RFN-MAN-02]`).
2.  Use `config/` files loaded via `src/settings.py`.
3.  Manage secrets via K8s Secrets/Workload Identity (`@SRS [RFN-SEG-03]`).
4.  Implement comprehensive async testing (`@SRS [RFN-MAN-03]`).
5.  Use Git.
6.  Maintain `README.md` (including IaC setup, Viz usage, FT/DSPy overview) (`@SRS [RFN-MAN-06]`).
7.  Ensure `output/` is in `.gitignore`.
8.  Manage infrastructure via Terraform in `infra/terraform/` (`@SRS [2.4, RFN-MAN-08]`).

**18. Proposed Directory Structure (Monolithic Modular with FT+DSPy & Viz)**

```python
plataforma_marketing_ia/
├── .env
├── .gitignore               # Includes output/
├── Dockerfile
├── README.md                # Includes IaC Setup, Viz usage, FT/DSPy overview
├── requirements.txt         # Includes dspy-ai, google-cloud-aiplatform, viz, OR libs
├── requirements-dev.txt
├── pyproject.toml
│
├── config/
│   ├── settings.yaml
│   ├── prompts/             # DSPy Signatures / Basic Templates
│   └── nemo/                # Nemo Guardrails configs
│
├── fine_tuning/             # Fine-tuning Pipeline Artifacts
│   ├── datasets/
│   ├── jobs/
│   └── evaluation/
│
├── infra/                   # Infrastructure as Code
│   ├── kubernetes/
│   ├── terraform/           # **Mandatory Terraform code**
│   └── docker-compose.yml   # Optional local setup
│
├── scripts/                 # Utility scripts (viz, ft, dspy opt)
│
├── src/                     # Main application source code
│   ├── __init__.py
│   ├── main.py              # Entry point(s)
│   ├── settings.py          # Loads FT model IDs & compiled DSPy program paths
│   ├── logging_config.py    # Logfire setup
│   │
│   ├── agents/              # Core agent logic & LangGraph
│   │   ├── __init__.py
│   │   ├── state.py
│   │   ├── graph.py         # Main LangGraph builder (integrates Nemo)
│   │   ├── tools/
│   │   ├── odin/
│   │   ├── artemis/         # (Uses FT+DSPy, ReAct optional)
│   │   ├── bifrost/         # (Uses Base LLM, ReAct optional in tools)
│   │   ├── forseti/         # (Uses FT+DSPy, ReAct likely)
│   │   ├── celebrimbor/     # (Uses Base LLM + DSPy optional)
│   │   ├── hygieia/         # (Uses FT/Base+DSPy optional, ReAct optional)
│   │   ├── seidr/           # (Uses FT+DSPy+ReAct mandatorily)
│   │   ├── heimdallr/       # (Uses FT+DSPy, ReAct likely)
│   │   └── cerberus/        # (Implements Nemo Actions)
│   │
│   ├── core/
│   ├── processing/          # DSPy programs (.py), helpers
│   ├── storage/             # Async clients (MLflow interacts with FT/DSPy)
│   ├── streaming/           # Odin's consumer (pubsub)
│   ├── validation/          # Shared validation logic
│   ├── utils/
│   └── viz/                 # Visualization Module
│
├── notebooks/               # Exploration, analysis, FT/DSPy experiments, viz tests
│
├── output/                  # Git Ignored
│   ├── visualizations/
│   └── compiled_dspy/       # Optional compiled DSPy programs
│
└── tests/                   # Unit and integration tests
    ├── ...
    └── src/                 # Mirrors src structure
        ├── fine_tuning/     # Tests for FT pipeline
        ├── processing/      # Tests for DSPy programs
        └── ... (tests for agents, storage, viz, etc.)
